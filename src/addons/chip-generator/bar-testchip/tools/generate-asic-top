#!/usr/bin/python2

import argparse
import json

parser = argparse.ArgumentParser(description='Generate an ASIC harness for UCB Test Chips')
parser.add_argument('--system-top', dest='system_top')
parser.add_argument('--chip-top', dest='chip_top')
parser.add_argument('--syn-top', dest='syn_top')
parser.add_argument('--decoupled', dest='decoupled')
parser.add_argument('--output', dest='output')

args = parser.parse_args()

htif_width = 16
divider = 7

def reverse_port_direction(direction):
  if direction == "input":
    return "output"
  if direction == "output":
    return "input"
  print "unknown direction: %s" % direction
  exit(1)

def direction_caps(direction):
  if direction == "input":
    return "INPUT"
  if direction == "output":
    return "OUTPUT"
  print "unknown direction: %s" % direction
  exit(1)

with open(args.output, 'w') as output:
  decoupled = None
  with open(args.decoupled, 'r') as decoupled_file:
    decoupled = json.load(decoupled_file)

  output.write("import Chisel._\n")
  output.write("object Main {\n")
  output.write("  def main(args: Array[String]): Unit = {\n")
  output.write("    chiselMain(args, () => Module(new %s()))\n" % (args.chip_top))
  output.write("  }\n")
  output.write("}\n")
  output.write("\n")
  output.write("class %sIO extends Bundle {\n" % (args.system_top))
  output.write("  val interrupts_0 = Bool(INPUT);\n")
  output.write("  val interrupts_1 = Bool(INPUT);\n")
  for queue in decoupled["decoupled io"]:
    output.write("  val %s_ready = Bool(%s).flip;\n" % (queue["base"], direction_caps(queue["direction"])))
    output.write("  val %s_valid = Bool(%s);\n" % (queue["base"], direction_caps(queue["direction"])))
    for wire in queue["bits"]:
      output.write("  val %s_bits_%s = Bits(%s, width = %d);\n" % (queue["base"], wire["name"], direction_caps(queue["direction"]), int(wire["width"])))
  output.write("}\n")
  output.write("class %sIO extends %sIO {\n" % (args.chip_top, args.system_top))
  output.write("}\n")
  output.write("class %s extends Module {\n" % (args.chip_top))
  output.write("  val io = new %sIO()\n" % (args.chip_top))
  output.write("  val syn_top = Module(new %s)\n" % (args.syn_top))
  output.write("  syn_top.io.interrupts_0 := io.interrupts_0\n")
  output.write("  syn_top.io.interrupts_1 := io.interrupts_1\n")
  output.write("  syn_top.io.host_in := UInt(0)\n")
  output.write("  val old_clock = Reg(init = Bool(false))\n")
  output.write("  old_clock := syn_top.io.host_clk\n")
  output.write("  val clock_edge_up = (old_clock === Bool(true) && syn_top.io.host_clk === Bool(false))\n")
  output.write("  val clock_edge_dn = (old_clock === Bool(false) && syn_top.io.host_clk === Bool(true))\n")
  output.write("  val synced = Reg(init = Bool(false))\n")
  output.write("  val addr = Reg(UInt(width = 32))\n")
  output.write("  when (syn_top.io.host_sync === Bool(true) && (clock_edge_dn)) {\n")
  output.write("    synced := Bool(true)\n")
  output.write("    addr := UInt(0)\n")
  output.write("  }\n")
  output.write("  val do_i = synced && clock_edge_dn\n")
  output.write("  val do_o = synced && clock_edge_up\n")
  output.write("  when (do_o & !syn_top.io.host_sync) { addr := addr + UInt(1) }\n")
  addr = 1
  for queue in decoupled["decoupled io"]:
    if (queue["direction"] == "input"):
      output.write("  val empty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      output.write("  val rempty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      for wire in queue["bits"]:
        output.write("  val reg_%s_bits_%s = Reg(UInt(width = %d))\n" % (queue["base"], wire["name"], int(wire["width"])))
        output.write("  when (empty_%s && synced && io.%s_valid && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
        output.write("    reg_%s_bits_%s := io.%s_bits_%s\n" % (queue["base"], wire["name"], queue["base"], wire["name"]))
        output.write("  }\n")
        for bs in range(0, int(wire["width"]), htif_width):
          output.write("  when (addr === UInt(%d) && !empty_%s) {\n" % (addr, queue["base"]))
          output.write("    syn_top.io.host_in := reg_%s_bits_%s(%d, %d)\n" % (queue["base"], wire["name"], min(bs + htif_width - 1, int(wire["width"])-1), bs))
          output.write("  }\n")
          addr = addr + 1
      output.write("  when (addr === UInt(%d + 0) && do_i && !empty_%s) {\n" % (addr, queue["base"]))
      output.write("    rempty_%s := !syn_top.io.host_out(0)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (addr === UInt(%d + 1)) {\n" % (addr))
      output.write("    syn_top.io.host_in := !empty_%s\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (rempty_%s && addr === UInt(0)) {\n" % (queue["base"]))
      output.write("    empty_%s := Bool(true)\n" % (queue["base"]))
      output.write("    rempty_%s := Bool(false)\n" % queue["base"])
      output.write("  }\n")
      output.write("  when (empty_%s && io.%s_valid && synced && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
      output.write("    empty_%s := Bool(false)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  io.%s_ready := empty_%s && synced && addr === UInt(0)\n" % (queue["base"], queue["base"]))
      addr = addr + 2
    else:
      output.write("  val empty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      output.write("  val rempty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      for wire in queue["bits"]:
        output.write("  val reg_%s_bits_%s = Reg(UInt(width = %d))\n" % (queue["base"], wire["name"], int(wire["width"])))
        output.write("  io.%s_bits_%s := reg_%s_bits_%s\n" % (queue["base"], wire["name"], queue["base"], wire["name"]))
        for bs in range(0, int(wire["width"]), htif_width):
          output.write("  when (addr === UInt(%d) && do_i && empty_%s) {\n" % (addr, queue["base"]))
          if (wire["width"] == "1"):
            output.write("    reg_%s_bits_%s := syn_top.io.host_out\n" % (queue["base"], wire["name"]))
          else:
            output.write("    reg_%s_bits_%s(%d, %d) := syn_top.io.host_out\n" % (queue["base"], wire["name"], min(bs + htif_width - 1, int(wire["width"])-1), bs))
          output.write("  }\n")
          addr = addr + 1
      output.write("  when (addr === UInt(%d + 0)) {\n" % (addr))
      output.write("    syn_top.io.host_in := !empty_%s\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (addr === UInt(%d + 1) && do_i && empty_%s) {\n" % (addr, queue["base"]))
      output.write("    rempty_%s := !syn_top.io.host_out(0)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (!empty_%s && io.%s_ready && synced && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
      output.write("    empty_%s := Bool(true)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (!rempty_%s && addr === UInt(0)) {\n" % (queue["base"]))
      output.write("    empty_%s := Bool(false)\n" % (queue["base"]))
      output.write("    rempty_%s := Bool(true)\n" % queue["base"])
      output.write("  }\n")
      output.write("  when (!empty_%s && io.%s_ready && synced && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
      output.write("    empty_%s := Bool(true)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  io.%s_valid := !empty_%s && synced && addr === UInt(0)\n" % (queue["base"], queue["base"]))
      addr = addr + 2
  output.write("  when (addr >= UInt(%d) && do_o) { addr := UInt(0) }\n" % (addr))
  output.write("}\n")

  output.write("class %sIO extends Bundle {\n" % (args.syn_top))
  output.write("  val host_in      = Bits(INPUT,  width=%d);\n" % (htif_width))
  output.write("  val host_out     = Bits(OUTPUT, width=%d);\n" % (htif_width))
  output.write("  val host_clk     = Bool(OUTPUT);\n")
  output.write("  val host_sync    = Bool(OUTPUT);\n")
  output.write("  val interrupts_0 = Bool(INPUT);\n")
  output.write("  val interrupts_1 = Bool(INPUT);\n")
  output.write("}\n")
  output.write("class %s extends Module{\n" % (args.syn_top))
  output.write("  val io = new %sIO()\n" % (args.syn_top))
  output.write("  io.host_out := UInt(0)\n")
  output.write("  val sys_top = Module(new %s)\n" % (args.system_top))
  output.write("  sys_top.io.interrupts_0 := io.interrupts_0\n")
  output.write("  sys_top.io.interrupts_1 := io.interrupts_1\n")
  output.write("  val divider = Reg(UInt(width = %d))\n" % (divider))
  output.write("  divider := divider + UInt(1)\n")
  output.write("  val addr = Reg(UInt(width = 32))\n")
  output.write("  io.host_sync := (addr === UInt(0))\n")
  output.write("  when (divider === UInt(0)) {\n")
  output.write("    addr := addr + UInt(1)\n")
  output.write("    io.host_sync := Bool(false)\n")
  output.write("  }\n")
  output.write("  io.host_clk := divider >= UInt(1 << %d)\n" % (divider - 1))
  output.write("  val synced = Reg(init = Bool(false))\n")
  output.write("  when (divider === UInt(0) && addr === UInt(0)) {\n")
  output.write("    synced := Bool(true)\n")
  output.write("  }\n")
  output.write("  val do_o = divider === UInt(0)\n")
  output.write("  val do_i = divider === UInt(1 << %d)\n" % (divider -1))
  addr = 1
  for queue in decoupled["decoupled io"]:
    if (queue["direction"] == "output"):
      output.write("  val empty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      output.write("  val rempty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      for wire in queue["bits"]:
        output.write("  val reg_%s_bits_%s = Reg(UInt(width = %d))\n" % (queue["base"], wire["name"], int(wire["width"])))
        output.write("  when (empty_%s && sys_top.io.%s_valid && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
        output.write("    reg_%s_bits_%s := sys_top.io.%s_bits_%s\n" % (queue["base"], wire["name"], queue["base"], wire["name"]))
        output.write("  }\n")
        for bs in range(0, int(wire["width"]), htif_width):
          output.write("  when (addr === UInt(%d) && !empty_%s) {\n" % (addr, queue["base"]))
          output.write("    io.host_out := reg_%s_bits_%s(%d, %d)\n" % (queue["base"], wire["name"], min(bs + htif_width - 1, int(wire["width"])-1), bs))
          output.write("  }\n")
          addr = addr + 1
      output.write("  when (addr === UInt(%d + 0) && do_i && !empty_%s) {\n" % (addr, queue["base"]))
      output.write("    rempty_%s := !io.host_in(0)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (addr === UInt(%d + 1)) {\n" % (addr))
      output.write("    io.host_out := !empty_%s\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (rempty_%s && addr === UInt(0)) {\n" % (queue["base"]))
      output.write("    empty_%s := Bool(true)\n" % (queue["base"]))
      output.write("    rempty_%s := Bool(false)\n" % queue["base"])
      output.write("  }\n")
      output.write("  when (empty_%s && sys_top.io.%s_valid && synced && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
      output.write("    empty_%s := Bool(false)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  sys_top.io.%s_ready := empty_%s && synced && addr === UInt(0)\n" % (queue["base"], queue["base"]))
      addr = addr + 2
    else:
      output.write("  val empty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      output.write("  val rempty_%s = Reg(init = Bool(true))\n" % (queue["base"]))
      for wire in queue["bits"]:
        output.write("  val reg_%s_bits_%s = Reg(UInt(width = %d))\n" % (queue["base"], wire["name"], int(wire["width"])))
        output.write("  sys_top.io.%s_bits_%s := reg_%s_bits_%s\n" % (queue["base"], wire["name"], queue["base"], wire["name"]))
        for bs in range(0, int(wire["width"]), htif_width):
          output.write("  when (addr === UInt(%d) && do_i && empty_%s) {\n" % (addr, queue["base"]))
          if (wire["width"] == "1"):
            output.write("    reg_%s_bits_%s := io.host_in\n" % (queue["base"], wire["name"]))
          else:
            output.write("    reg_%s_bits_%s(%d, %d) := io.host_in\n" % (queue["base"], wire["name"], min(bs + htif_width - 1, int(wire["width"])-1), bs))
          output.write("  }\n")
          addr = addr + 1
      output.write("  when (addr === UInt(%d + 0)) {\n" % (addr))
      output.write("    io.host_out := !empty_%s\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (addr === UInt(%d + 1) && do_i && empty_%s) {\n" % (addr, queue["base"]))
      output.write("    rempty_%s := !io.host_in(0)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (!empty_%s && sys_top.io.%s_ready && synced && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
      output.write("    empty_%s := Bool(true)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  when (!rempty_%s && addr === UInt(0)) {\n" % (queue["base"]))
      output.write("    empty_%s := Bool(false)\n" % (queue["base"]))
      output.write("    rempty_%s := Bool(true)\n" % queue["base"])
      output.write("  }\n")
      output.write("  when (!empty_%s && sys_top.io.%s_ready && synced && addr === UInt(0)) {\n" % (queue["base"], queue["base"]))
      output.write("    empty_%s := Bool(true)\n" % (queue["base"]))
      output.write("  }\n")
      output.write("  sys_top.io.%s_valid := !empty_%s && synced && addr === UInt(0)\n" % (queue["base"], queue["base"]))
      addr = addr + 2
  output.write("  when (addr >= UInt(%d) && do_o) { addr := UInt(0) }\n" % (addr))
  output.write("}\n");

  output.write("class %s extends BlackBox {\n" % (args.system_top))
  output.write("  val io = new %sIO()\n" % (args.system_top))
  output.write("  val dummy = Reg(init = Bool(false));\n")
  output.write("  debug(dummy);\n")
  output.write("}\n")
