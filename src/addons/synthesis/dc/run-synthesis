#!/bin/bash

unset run_dir
unset dc
unset rmtar
libs=()
mw=()
unset top
v=()
tlu_min=()
tlu_max=()
tf=()
unset find_regs
while [[ "$1" != "" ]]
do
    case "$1" in
    "$0") ;;
    --output_dir) run_dir="$2"; shift;;
    */dc_shell) dc="$1";;
    */DC-RM_*.tar) rmtar="$1";;
    *.db) libs+=("$1");;
    */lib) mw+=("$(dirname "$1")");;
    --top) top="$2"; shift;;
    *.v) v+=("$1");;
    *Cmin.tluplus) tlu_min+=("$1");;
    *Cmax.tluplus) tlu_max+=("$1");;
    *.tf) tf+=("$1");;
    */find-regs.tcl) find_regs="$1";;
    *) echo "Unknown argument $1"; exit 1;;
    esac
    shift
done

set -ex

rm -rf "$run_dir"
mkdir -p "$run_dir"

cat >"$run_dir"/enter <<EOF
export DC_HOME="$(dirname $(dirname $dc))"
export PATH="\$DC_HOME/bin:\$PATH"
EOF

# Almost all of what I do is to just use Synopsys's reference methodology,
# which users are expected to have downloaded.
tar -xf "$rmtar" -C "$run_dir" --strip-components=1

# The default DC script has an "exit" an the end, which we want to strip off so
# I can add more commands after all the RM DC stuff.
sed 's/^exit$//g' -i $run_dir/rm_dc_scripts/dc.tcl

# This variable is set in "dc_setup.tcl", which for some reason we're expected
# to edit inside this file in addition to setting it up inside the setup file
# above.  Instead I just remove this second definition, as it's pretty useless.
sed 's/^set RTL_SOURCE_FILES .*$//' -i $run_dir/rm_setup/dc_setup.tcl

# Here's another thing that the scripts overwrite but that I want to set
sed 's/^set DCRM_CONSTRAINTS_INPUT_FILE .*$//' -i $run_dir/rm_setup/dc_setup_filenames.tcl

# I don't want to write ICC2 files
sed 's/^write_icc2_files .*$//' -i $run_dir/rm_dc_scripts/dc.tcl

# FIXME: We aren't licensed for "DC-Extension" so we can't pass "-congestion"
# or "-spg" to compile_ultra
find $run_dir -iname "*.tcl" | xargs sed s/'compile_ultra .*'/'compile_ultra -no_auto_ungroup'/g -i

# Most of the customization of the DC reference methodology is done here: this
# sets all the input files and such.
mkdir -p $run_dir/rm_setup
cat >> $run_dir/rm_setup/common_setup.tcl <<EOF
set DESIGN_NAME "$top";
set RTL_SOURCE_FILES "${v[@]}";
set TARGET_LIBRARY_FILES "${libs[@]}";
set MW_REFERENCE_LIB_DIRS "${mw[@]}";
set MIN_LIBRARY_FILES "";
set TECH_FILE "${tf[@]}";
set TLUPLUS_MAX_FILE "${tlu_max[@]}";
set TLUPLUS_MIN_FILE "${tlu_min[@]}";
set ALIB_DIR "alib";
set DCRM_CONSTRAINTS_INPUT_FILE "generated-scripts/constraints.tcl"
set REPORTS_DIR "reports";
set RESULTS_DIR "results";
set CLOCK_UNCERTAINTY "0.04";
set INPUT_DELAY "0.10";
set OUTPUT_DELAY "0.10";
# FIXME: This shouldn't be just hard-coded, but I've forgotton how the PLSI job submission interface works
set_host_options -max_cores 16
EOF

# FIXME: for now, you just get one clock, and the Synopsys EDK isn't very fast
# so everything runs at 100MHz.
# The constraints file determines how the IO is constrained and what the clocks
# look like.
mkdir -p $run_dir/generated-scripts
cat >> $run_dir/generated-scripts/constraints.tcl <<"EOF"
# create clock
create_clock clock -name clock -period 10
set_clock_uncertainty 0.01 [get_clocks clock]

# set drive strength for inputs
#set_driving_cell -lib_cell INVD0BWP12T [all_inputs]
# set load capacitance of outputs
set_load -pin_load 0.004 [all_outputs]

set all_inputs_but_clock [remove_from_collection [all_inputs] [get_ports clock]]
set_input_delay 0.02 -clock [get_clocks clock] $all_inputs_but_clock
set_output_delay 0.03 -clock [get_clocks clock] [all_outputs]

set_isolate_ports [all_outputs] -type buffer
set_isolate_ports [remove_from_collection [all_inputs] clock] -type buffer -force
EOF


# FIXME: This shouldn't depend on Synopsys
# At the end of the DC run we want to generate a special simulation file that
# tells VCS to set all the generated registers to 0.  I was hoping that
# "+vcs+initreg+0" would do this, but it doesn't look like it does.
cat >> $run_dir/rm_dc_scripts/dc.tcl <<EOF
source ${find_regs}
find_regs $top 0 \${RESULTS_DIR}/$top.force_regs.ucli \${RESULTS_DIR}/$top.force_regs.tab
EOF

# Here's the actual DC invocation
echo "exit" >> $run_dir/rm_dc_scripts/dc.tcl
cd $run_dir
$dc -topographical_mode -f rm_dc_scripts/dc.tcl \
    |& tee dc.log

# FIXME: This definately shouldn't have "dut" hard-coded here, and shouldn't
# rely on sed.
sed s/$top/dut/g -i $run_dir/results/$top.force_regs.ucli

# Make sure there's no invalid output from DC
grep ^Error dc.log && (echo "DC produced error messages"; exit 1)
grep ^Warning dc.log && (echo "DC produced warning messages")
